name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_IMAGE_NAME: ai-market-seg
  DOCKER_CONTAINER_NAME: ai-market-seg-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd app
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
        docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > image.tar.gz

    - name: Debug secrets
      run: |
        echo "Testing if secrets are available:"
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "ERROR: VPS_HOST secret is empty or not set"
        else
          echo "SUCCESS: VPS_HOST is set"
        fi
        if [ -z "${{ secrets.VPS_USER }}" ]; then
          echo "ERROR: VPS_USER secret is empty or not set"
        else
          echo "SUCCESS: VPS_USER is set"
        fi
        if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "ERROR: VPS_SSH_KEY secret is empty or not set"
        else
          echo "SUCCESS: VPS_SSH_KEY is set"
        fi

    - name: Test SSH connection
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        script: |
          echo "SSH connection successful!"
          ls -la ~/

    - name: Copy image to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        source: "app/image.tar.gz,app/docker-compose.yml"
        target: "/tmp/ai-market-seg-deploy"
        debug: true

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Debug: Check what was copied
          echo "=== Checking deployment files ==="
          ls -la /tmp/ai-market-seg-deploy/
          
          # Load the Docker image
          cd /tmp/ai-market-seg-deploy
          
          # Debug: Check current directory
          echo "=== Current directory contents ==="
          pwd
          ls -la
          
          # Extract if we're in the app subdirectory
          if [ -d "app" ]; then
            echo "Found app directory, entering it"
            cd app
            ls -la
          fi
          
          echo "=== Loading Docker image ==="
          gunzip -c image.tar.gz | docker load
          
          # Create app directory if it doesn't exist
          mkdir -p ~/apps/ai-market-seg
          
          # Copy docker-compose.yml to app directory
          echo "=== Copying docker-compose.yml ==="
          cp docker-compose.yml ~/apps/ai-market-seg/
          
          # Navigate to app directory
          cd ~/apps/ai-market-seg
          
          echo "=== App directory contents ==="
          pwd
          ls -la
          
          # Check if .env.production exists
          if [ ! -f .env.production ]; then
            echo "ERROR: .env.production file not found!"
            echo "Please create .env.production with your API keys"
            echo "Run this command on your VPS to create it:"
            echo "cat > ~/apps/ai-market-seg/.env.production << 'EOF'"
            echo "ANTHROPIC_API_KEY=your_anthropic_api_key_here"
            echo "SERPER_API_KEY=your_serper_api_key_here"
            echo "NODE_ENV=production"
            echo "EOF"
            exit 1
          fi
          
          # Check what's using port 8080
          echo "=== Checking port 8080 usage ==="
          sudo lsof -i :8080 || echo "lsof not available"
          sudo netstat -tlnp | grep :8080 || echo "netstat output"
          docker ps --format "table {{.Names}}\t{{.Ports}}" | grep 8080 || echo "No docker containers on 8080"
          
          # Stop existing container (if any)
          docker-compose down || true
          docker stop $(docker ps -q --filter "publish=8080") 2>/dev/null || true
          
          # Start new container
          docker-compose up -d
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 10
          
          # Check if container is running
          if docker-compose ps | grep -q "Up"; then
            echo "Container is running!"
            # Test the health endpoint
            curl -f http://localhost:3000/api/health || echo "Health check endpoint not responding yet"
          else
            echo "Container failed to start"
            docker-compose logs
            exit 1
          fi
          
          # Clean up deployment files
          rm -rf /tmp/ai-market-seg-deploy
          
          # Show final status
          docker-compose ps
          echo "Deployment completed successfully!"
          echo "Application is running on http://${{ secrets.VPS_HOST }}:8090"

    - name: Cleanup local files
      if: always()
      run: rm -f app/image.tar.gz